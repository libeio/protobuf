// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: twelfth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_twelfth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_twelfth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_twelfth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_twelfth_2eproto;
namespace mam {
class AccountOverview;
class AccountOverviewDefaultTypeInternal;
extern AccountOverviewDefaultTypeInternal _AccountOverview_default_instance_;
class AccountOverviews;
class AccountOverviewsDefaultTypeInternal;
extern AccountOverviewsDefaultTypeInternal _AccountOverviews_default_instance_;
class LoadResult;
class LoadResultDefaultTypeInternal;
extern LoadResultDefaultTypeInternal _LoadResult_default_instance_;
class LoadResult_MapAccountOverviewEntry_DoNotUse;
class LoadResult_MapAccountOverviewEntry_DoNotUseDefaultTypeInternal;
extern LoadResult_MapAccountOverviewEntry_DoNotUseDefaultTypeInternal _LoadResult_MapAccountOverviewEntry_DoNotUse_default_instance_;
class LoadResult_MapProfitDetailEntry_DoNotUse;
class LoadResult_MapProfitDetailEntry_DoNotUseDefaultTypeInternal;
extern LoadResult_MapProfitDetailEntry_DoNotUseDefaultTypeInternal _LoadResult_MapProfitDetailEntry_DoNotUse_default_instance_;
class ProfitDetail;
class ProfitDetailDefaultTypeInternal;
extern ProfitDetailDefaultTypeInternal _ProfitDetail_default_instance_;
class ProfitDetails;
class ProfitDetailsDefaultTypeInternal;
extern ProfitDetailsDefaultTypeInternal _ProfitDetails_default_instance_;
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> ::mam::AccountOverview* Arena::CreateMaybeMessage<::mam::AccountOverview>(Arena*);
template<> ::mam::AccountOverviews* Arena::CreateMaybeMessage<::mam::AccountOverviews>(Arena*);
template<> ::mam::LoadResult* Arena::CreateMaybeMessage<::mam::LoadResult>(Arena*);
template<> ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse* Arena::CreateMaybeMessage<::mam::LoadResult_MapAccountOverviewEntry_DoNotUse>(Arena*);
template<> ::mam::LoadResult_MapProfitDetailEntry_DoNotUse* Arena::CreateMaybeMessage<::mam::LoadResult_MapProfitDetailEntry_DoNotUse>(Arena*);
template<> ::mam::ProfitDetail* Arena::CreateMaybeMessage<::mam::ProfitDetail>(Arena*);
template<> ::mam::ProfitDetails* Arena::CreateMaybeMessage<::mam::ProfitDetails>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mam {

// ===================================================================

class LoadResult_MapAccountOverviewEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LoadResult_MapAccountOverviewEntry_DoNotUse, 
    std::string, ::mam::AccountOverviews,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LoadResult_MapAccountOverviewEntry_DoNotUse, 
    std::string, ::mam::AccountOverviews,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  LoadResult_MapAccountOverviewEntry_DoNotUse();
  explicit LoadResult_MapAccountOverviewEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LoadResult_MapAccountOverviewEntry_DoNotUse& other);
  static const LoadResult_MapAccountOverviewEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LoadResult_MapAccountOverviewEntry_DoNotUse*>(&_LoadResult_MapAccountOverviewEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "mam.LoadResult.MapAccountOverviewEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twelfth_2eproto);
    return ::descriptor_table_twelfth_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class LoadResult_MapProfitDetailEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LoadResult_MapProfitDetailEntry_DoNotUse, 
    std::string, ::mam::ProfitDetails,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LoadResult_MapProfitDetailEntry_DoNotUse, 
    std::string, ::mam::ProfitDetails,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  LoadResult_MapProfitDetailEntry_DoNotUse();
  explicit LoadResult_MapProfitDetailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LoadResult_MapProfitDetailEntry_DoNotUse& other);
  static const LoadResult_MapProfitDetailEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LoadResult_MapProfitDetailEntry_DoNotUse*>(&_LoadResult_MapProfitDetailEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "mam.LoadResult.MapProfitDetailEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twelfth_2eproto);
    return ::descriptor_table_twelfth_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class LoadResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.LoadResult) */ {
 public:
  inline LoadResult() : LoadResult(nullptr) {}
  virtual ~LoadResult();

  LoadResult(const LoadResult& from);
  LoadResult(LoadResult&& from) noexcept
    : LoadResult() {
    *this = ::std::move(from);
  }

  inline LoadResult& operator=(const LoadResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadResult& operator=(LoadResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadResult* internal_default_instance() {
    return reinterpret_cast<const LoadResult*>(
               &_LoadResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoadResult& a, LoadResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadResult* New() const final {
    return CreateMaybeMessage<LoadResult>(nullptr);
  }

  LoadResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadResult& from);
  void MergeFrom(const LoadResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.LoadResult";
  }
  protected:
  explicit LoadResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twelfth_2eproto);
    return ::descriptor_table_twelfth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapAccountOverviewFieldNumber = 1,
    kMapProfitDetailFieldNumber = 2,
  };
  // map<string, .mam.AccountOverviews> map_account_overview = 1;
  int map_account_overview_size() const;
  private:
  int _internal_map_account_overview_size() const;
  public:
  void clear_map_account_overview();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >&
      _internal_map_account_overview() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >*
      _internal_mutable_map_account_overview();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >&
      map_account_overview() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >*
      mutable_map_account_overview();

  // map<string, .mam.ProfitDetails> map_profit_detail = 2;
  int map_profit_detail_size() const;
  private:
  int _internal_map_profit_detail_size() const;
  public:
  void clear_map_profit_detail();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >&
      _internal_map_profit_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >*
      _internal_mutable_map_profit_detail();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >&
      map_profit_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >*
      mutable_map_profit_detail();

  // @@protoc_insertion_point(class_scope:mam.LoadResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LoadResult_MapAccountOverviewEntry_DoNotUse,
      std::string, ::mam::AccountOverviews,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_account_overview_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LoadResult_MapProfitDetailEntry_DoNotUse,
      std::string, ::mam::ProfitDetails,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_profit_detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twelfth_2eproto;
};
// -------------------------------------------------------------------

class AccountOverviews PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.AccountOverviews) */ {
 public:
  inline AccountOverviews() : AccountOverviews(nullptr) {}
  virtual ~AccountOverviews();

  AccountOverviews(const AccountOverviews& from);
  AccountOverviews(AccountOverviews&& from) noexcept
    : AccountOverviews() {
    *this = ::std::move(from);
  }

  inline AccountOverviews& operator=(const AccountOverviews& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountOverviews& operator=(AccountOverviews&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountOverviews& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountOverviews* internal_default_instance() {
    return reinterpret_cast<const AccountOverviews*>(
               &_AccountOverviews_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccountOverviews& a, AccountOverviews& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountOverviews* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountOverviews* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountOverviews* New() const final {
    return CreateMaybeMessage<AccountOverviews>(nullptr);
  }

  AccountOverviews* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountOverviews>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountOverviews& from);
  void MergeFrom(const AccountOverviews& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountOverviews* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.AccountOverviews";
  }
  protected:
  explicit AccountOverviews(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twelfth_2eproto);
    return ::descriptor_table_twelfth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // repeated .mam.AccountOverview content = 1;
  int content_size() const;
  private:
  int _internal_content_size() const;
  public:
  void clear_content();
  ::mam::AccountOverview* mutable_content(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >*
      mutable_content();
  private:
  const ::mam::AccountOverview& _internal_content(int index) const;
  ::mam::AccountOverview* _internal_add_content();
  public:
  const ::mam::AccountOverview& content(int index) const;
  ::mam::AccountOverview* add_content();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >&
      content() const;

  // @@protoc_insertion_point(class_scope:mam.AccountOverviews)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview > content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twelfth_2eproto;
};
// -------------------------------------------------------------------

class ProfitDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.ProfitDetails) */ {
 public:
  inline ProfitDetails() : ProfitDetails(nullptr) {}
  virtual ~ProfitDetails();

  ProfitDetails(const ProfitDetails& from);
  ProfitDetails(ProfitDetails&& from) noexcept
    : ProfitDetails() {
    *this = ::std::move(from);
  }

  inline ProfitDetails& operator=(const ProfitDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfitDetails& operator=(ProfitDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfitDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfitDetails* internal_default_instance() {
    return reinterpret_cast<const ProfitDetails*>(
               &_ProfitDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProfitDetails& a, ProfitDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfitDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfitDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfitDetails* New() const final {
    return CreateMaybeMessage<ProfitDetails>(nullptr);
  }

  ProfitDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfitDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfitDetails& from);
  void MergeFrom(const ProfitDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfitDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.ProfitDetails";
  }
  protected:
  explicit ProfitDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twelfth_2eproto);
    return ::descriptor_table_twelfth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // repeated .mam.ProfitDetail content = 1;
  int content_size() const;
  private:
  int _internal_content_size() const;
  public:
  void clear_content();
  ::mam::ProfitDetail* mutable_content(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::ProfitDetail >*
      mutable_content();
  private:
  const ::mam::ProfitDetail& _internal_content(int index) const;
  ::mam::ProfitDetail* _internal_add_content();
  public:
  const ::mam::ProfitDetail& content(int index) const;
  ::mam::ProfitDetail* add_content();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::ProfitDetail >&
      content() const;

  // @@protoc_insertion_point(class_scope:mam.ProfitDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::ProfitDetail > content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twelfth_2eproto;
};
// -------------------------------------------------------------------

class AccountOverview PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.AccountOverview) */ {
 public:
  inline AccountOverview() : AccountOverview(nullptr) {}
  virtual ~AccountOverview();

  AccountOverview(const AccountOverview& from);
  AccountOverview(AccountOverview&& from) noexcept
    : AccountOverview() {
    *this = ::std::move(from);
  }

  inline AccountOverview& operator=(const AccountOverview& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountOverview& operator=(AccountOverview&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountOverview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountOverview* internal_default_instance() {
    return reinterpret_cast<const AccountOverview*>(
               &_AccountOverview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AccountOverview& a, AccountOverview& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountOverview* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountOverview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountOverview* New() const final {
    return CreateMaybeMessage<AccountOverview>(nullptr);
  }

  AccountOverview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountOverview>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountOverview& from);
  void MergeFrom(const AccountOverview& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountOverview* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.AccountOverview";
  }
  protected:
  explicit AccountOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twelfth_2eproto);
    return ::descriptor_table_twelfth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTurnoverFieldNumber = 2,
    kRateFieldNumber = 3,
    kFeeFieldNumber = 4,
    kProfitFieldNumber = 5,
    kAccountidFieldNumber = 1,
  };
  // double turnover = 2;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double rate = 3;
  void clear_rate();
  double rate() const;
  void set_rate(double value);
  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);
  public:

  // double fee = 4;
  void clear_fee();
  double fee() const;
  void set_fee(double value);
  private:
  double _internal_fee() const;
  void _internal_set_fee(double value);
  public:

  // double profit = 5;
  void clear_profit();
  double profit() const;
  void set_profit(double value);
  private:
  double _internal_profit() const;
  void _internal_set_profit(double value);
  public:

  // int32 accountid = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.AccountOverview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double turnover_;
  double rate_;
  double fee_;
  double profit_;
  ::PROTOBUF_NAMESPACE_ID::int32 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twelfth_2eproto;
};
// -------------------------------------------------------------------

class ProfitDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mam.ProfitDetail) */ {
 public:
  inline ProfitDetail() : ProfitDetail(nullptr) {}
  virtual ~ProfitDetail();

  ProfitDetail(const ProfitDetail& from);
  ProfitDetail(ProfitDetail&& from) noexcept
    : ProfitDetail() {
    *this = ::std::move(from);
  }

  inline ProfitDetail& operator=(const ProfitDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfitDetail& operator=(ProfitDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfitDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfitDetail* internal_default_instance() {
    return reinterpret_cast<const ProfitDetail*>(
               &_ProfitDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProfitDetail& a, ProfitDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfitDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfitDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfitDetail* New() const final {
    return CreateMaybeMessage<ProfitDetail>(nullptr);
  }

  ProfitDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfitDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfitDetail& from);
  void MergeFrom(const ProfitDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfitDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mam.ProfitDetail";
  }
  protected:
  explicit ProfitDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_twelfth_2eproto);
    return ::descriptor_table_twelfth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kAccountidFieldNumber = 1,
    kCfgvolFieldNumber = 3,
    kBuyvolFieldNumber = 4,
    kSellvolFieldNumber = 5,
  };
  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // int32 accountid = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cfgvol = 3;
  void clear_cfgvol();
  ::PROTOBUF_NAMESPACE_ID::int32 cfgvol() const;
  void set_cfgvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cfgvol() const;
  void _internal_set_cfgvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 buyvol = 4;
  void clear_buyvol();
  ::PROTOBUF_NAMESPACE_ID::int32 buyvol() const;
  void set_buyvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buyvol() const;
  void _internal_set_buyvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sellvol = 5;
  void clear_sellvol();
  ::PROTOBUF_NAMESPACE_ID::int32 sellvol() const;
  void set_sellvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sellvol() const;
  void _internal_set_sellvol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mam.ProfitDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::int32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cfgvol_;
  ::PROTOBUF_NAMESPACE_ID::int32 buyvol_;
  ::PROTOBUF_NAMESPACE_ID::int32 sellvol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_twelfth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LoadResult

// map<string, .mam.AccountOverviews> map_account_overview = 1;
inline int LoadResult::_internal_map_account_overview_size() const {
  return map_account_overview_.size();
}
inline int LoadResult::map_account_overview_size() const {
  return _internal_map_account_overview_size();
}
inline void LoadResult::clear_map_account_overview() {
  map_account_overview_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >&
LoadResult::_internal_map_account_overview() const {
  return map_account_overview_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >&
LoadResult::map_account_overview() const {
  // @@protoc_insertion_point(field_map:mam.LoadResult.map_account_overview)
  return _internal_map_account_overview();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >*
LoadResult::_internal_mutable_map_account_overview() {
  return map_account_overview_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >*
LoadResult::mutable_map_account_overview() {
  // @@protoc_insertion_point(field_mutable_map:mam.LoadResult.map_account_overview)
  return _internal_mutable_map_account_overview();
}

// map<string, .mam.ProfitDetails> map_profit_detail = 2;
inline int LoadResult::_internal_map_profit_detail_size() const {
  return map_profit_detail_.size();
}
inline int LoadResult::map_profit_detail_size() const {
  return _internal_map_profit_detail_size();
}
inline void LoadResult::clear_map_profit_detail() {
  map_profit_detail_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >&
LoadResult::_internal_map_profit_detail() const {
  return map_profit_detail_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >&
LoadResult::map_profit_detail() const {
  // @@protoc_insertion_point(field_map:mam.LoadResult.map_profit_detail)
  return _internal_map_profit_detail();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >*
LoadResult::_internal_mutable_map_profit_detail() {
  return map_profit_detail_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >*
LoadResult::mutable_map_profit_detail() {
  // @@protoc_insertion_point(field_mutable_map:mam.LoadResult.map_profit_detail)
  return _internal_mutable_map_profit_detail();
}

// -------------------------------------------------------------------

// AccountOverviews

// repeated .mam.AccountOverview content = 1;
inline int AccountOverviews::_internal_content_size() const {
  return content_.size();
}
inline int AccountOverviews::content_size() const {
  return _internal_content_size();
}
inline void AccountOverviews::clear_content() {
  content_.Clear();
}
inline ::mam::AccountOverview* AccountOverviews::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:mam.AccountOverviews.content)
  return content_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >*
AccountOverviews::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:mam.AccountOverviews.content)
  return &content_;
}
inline const ::mam::AccountOverview& AccountOverviews::_internal_content(int index) const {
  return content_.Get(index);
}
inline const ::mam::AccountOverview& AccountOverviews::content(int index) const {
  // @@protoc_insertion_point(field_get:mam.AccountOverviews.content)
  return _internal_content(index);
}
inline ::mam::AccountOverview* AccountOverviews::_internal_add_content() {
  return content_.Add();
}
inline ::mam::AccountOverview* AccountOverviews::add_content() {
  // @@protoc_insertion_point(field_add:mam.AccountOverviews.content)
  return _internal_add_content();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::AccountOverview >&
AccountOverviews::content() const {
  // @@protoc_insertion_point(field_list:mam.AccountOverviews.content)
  return content_;
}

// -------------------------------------------------------------------

// ProfitDetails

// repeated .mam.ProfitDetail content = 1;
inline int ProfitDetails::_internal_content_size() const {
  return content_.size();
}
inline int ProfitDetails::content_size() const {
  return _internal_content_size();
}
inline void ProfitDetails::clear_content() {
  content_.Clear();
}
inline ::mam::ProfitDetail* ProfitDetails::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:mam.ProfitDetails.content)
  return content_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::ProfitDetail >*
ProfitDetails::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:mam.ProfitDetails.content)
  return &content_;
}
inline const ::mam::ProfitDetail& ProfitDetails::_internal_content(int index) const {
  return content_.Get(index);
}
inline const ::mam::ProfitDetail& ProfitDetails::content(int index) const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetails.content)
  return _internal_content(index);
}
inline ::mam::ProfitDetail* ProfitDetails::_internal_add_content() {
  return content_.Add();
}
inline ::mam::ProfitDetail* ProfitDetails::add_content() {
  // @@protoc_insertion_point(field_add:mam.ProfitDetails.content)
  return _internal_add_content();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mam::ProfitDetail >&
ProfitDetails::content() const {
  // @@protoc_insertion_point(field_list:mam.ProfitDetails.content)
  return content_;
}

// -------------------------------------------------------------------

// AccountOverview

// int32 accountid = 1;
inline void AccountOverview::clear_accountid() {
  accountid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverview::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountOverview::accountid() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.accountid)
  return _internal_accountid();
}
inline void AccountOverview::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accountid_ = value;
}
inline void AccountOverview::set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.accountid)
}

// double turnover = 2;
inline void AccountOverview::clear_turnover() {
  turnover_ = 0;
}
inline double AccountOverview::_internal_turnover() const {
  return turnover_;
}
inline double AccountOverview::turnover() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.turnover)
  return _internal_turnover();
}
inline void AccountOverview::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void AccountOverview::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.turnover)
}

// double rate = 3;
inline void AccountOverview::clear_rate() {
  rate_ = 0;
}
inline double AccountOverview::_internal_rate() const {
  return rate_;
}
inline double AccountOverview::rate() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.rate)
  return _internal_rate();
}
inline void AccountOverview::_internal_set_rate(double value) {
  
  rate_ = value;
}
inline void AccountOverview::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.rate)
}

// double fee = 4;
inline void AccountOverview::clear_fee() {
  fee_ = 0;
}
inline double AccountOverview::_internal_fee() const {
  return fee_;
}
inline double AccountOverview::fee() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.fee)
  return _internal_fee();
}
inline void AccountOverview::_internal_set_fee(double value) {
  
  fee_ = value;
}
inline void AccountOverview::set_fee(double value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.fee)
}

// double profit = 5;
inline void AccountOverview::clear_profit() {
  profit_ = 0;
}
inline double AccountOverview::_internal_profit() const {
  return profit_;
}
inline double AccountOverview::profit() const {
  // @@protoc_insertion_point(field_get:mam.AccountOverview.profit)
  return _internal_profit();
}
inline void AccountOverview::_internal_set_profit(double value) {
  
  profit_ = value;
}
inline void AccountOverview::set_profit(double value) {
  _internal_set_profit(value);
  // @@protoc_insertion_point(field_set:mam.AccountOverview.profit)
}

// -------------------------------------------------------------------

// ProfitDetail

// int32 accountid = 1;
inline void ProfitDetail::clear_accountid() {
  accountid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::accountid() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.accountid)
  return _internal_accountid();
}
inline void ProfitDetail::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accountid_ = value;
}
inline void ProfitDetail::set_accountid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.accountid)
}

// string symbol = 2;
inline void ProfitDetail::clear_symbol() {
  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProfitDetail::symbol() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.symbol)
  return _internal_symbol();
}
inline void ProfitDetail::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.symbol)
}
inline std::string* ProfitDetail::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:mam.ProfitDetail.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& ProfitDetail::_internal_symbol() const {
  return symbol_.Get();
}
inline void ProfitDetail::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProfitDetail::set_symbol(std::string&& value) {
  
  symbol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mam.ProfitDetail.symbol)
}
inline void ProfitDetail::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mam.ProfitDetail.symbol)
}
inline void ProfitDetail::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mam.ProfitDetail.symbol)
}
inline std::string* ProfitDetail::_internal_mutable_symbol() {
  
  return symbol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProfitDetail::release_symbol() {
  // @@protoc_insertion_point(field_release:mam.ProfitDetail.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfitDetail::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mam.ProfitDetail.symbol)
}

// int32 cfgvol = 3;
inline void ProfitDetail::clear_cfgvol() {
  cfgvol_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::_internal_cfgvol() const {
  return cfgvol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::cfgvol() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.cfgvol)
  return _internal_cfgvol();
}
inline void ProfitDetail::_internal_set_cfgvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cfgvol_ = value;
}
inline void ProfitDetail::set_cfgvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cfgvol(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.cfgvol)
}

// int32 buyvol = 4;
inline void ProfitDetail::clear_buyvol() {
  buyvol_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::_internal_buyvol() const {
  return buyvol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::buyvol() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.buyvol)
  return _internal_buyvol();
}
inline void ProfitDetail::_internal_set_buyvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buyvol_ = value;
}
inline void ProfitDetail::set_buyvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buyvol(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.buyvol)
}

// int32 sellvol = 5;
inline void ProfitDetail::clear_sellvol() {
  sellvol_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::_internal_sellvol() const {
  return sellvol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfitDetail::sellvol() const {
  // @@protoc_insertion_point(field_get:mam.ProfitDetail.sellvol)
  return _internal_sellvol();
}
inline void ProfitDetail::_internal_set_sellvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sellvol_ = value;
}
inline void ProfitDetail::set_sellvol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sellvol(value);
  // @@protoc_insertion_point(field_set:mam.ProfitDetail.sellvol)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_twelfth_2eproto
