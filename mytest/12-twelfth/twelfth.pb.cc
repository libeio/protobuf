// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: twelfth.proto

#include "twelfth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountOverview_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountOverviews_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadResult_MapProfitDetailEntry_DoNotUse_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfitDetail_twelfth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_twelfth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfitDetails_twelfth_2eproto;
namespace mam {
class LoadResult_MapAccountOverviewEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadResult_MapAccountOverviewEntry_DoNotUse> _instance;
} _LoadResult_MapAccountOverviewEntry_DoNotUse_default_instance_;
class LoadResult_MapProfitDetailEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadResult_MapProfitDetailEntry_DoNotUse> _instance;
} _LoadResult_MapProfitDetailEntry_DoNotUse_default_instance_;
class LoadResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadResult> _instance;
} _LoadResult_default_instance_;
class AccountOverviewsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountOverviews> _instance;
} _AccountOverviews_default_instance_;
class ProfitDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfitDetails> _instance;
} _ProfitDetails_default_instance_;
class AccountOverviewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountOverview> _instance;
} _AccountOverview_default_instance_;
class ProfitDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfitDetail> _instance;
} _ProfitDetail_default_instance_;
}  // namespace mam
static void InitDefaultsscc_info_AccountOverview_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_AccountOverview_default_instance_;
    new (ptr) ::mam::AccountOverview();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::AccountOverview::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountOverview_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountOverview_twelfth_2eproto}, {}};

static void InitDefaultsscc_info_AccountOverviews_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_AccountOverviews_default_instance_;
    new (ptr) ::mam::AccountOverviews();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::AccountOverviews::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountOverviews_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AccountOverviews_twelfth_2eproto}, {
      &scc_info_AccountOverview_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_LoadResult_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_LoadResult_default_instance_;
    new (ptr) ::mam::LoadResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::LoadResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoadResult_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoadResult_twelfth_2eproto}, {
      &scc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto.base,
      &scc_info_LoadResult_MapProfitDetailEntry_DoNotUse_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_LoadResult_MapAccountOverviewEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse();
  }
  ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto}, {
      &scc_info_AccountOverviews_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_LoadResult_MapProfitDetailEntry_DoNotUse_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_LoadResult_MapProfitDetailEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::LoadResult_MapProfitDetailEntry_DoNotUse();
  }
  ::mam::LoadResult_MapProfitDetailEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadResult_MapProfitDetailEntry_DoNotUse_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadResult_MapProfitDetailEntry_DoNotUse_twelfth_2eproto}, {
      &scc_info_ProfitDetails_twelfth_2eproto.base,}};

static void InitDefaultsscc_info_ProfitDetail_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_ProfitDetail_default_instance_;
    new (ptr) ::mam::ProfitDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::ProfitDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfitDetail_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfitDetail_twelfth_2eproto}, {}};

static void InitDefaultsscc_info_ProfitDetails_twelfth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_ProfitDetails_default_instance_;
    new (ptr) ::mam::ProfitDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::ProfitDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfitDetails_twelfth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfitDetails_twelfth_2eproto}, {
      &scc_info_ProfitDetail_twelfth_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_twelfth_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_twelfth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_twelfth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_twelfth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapAccountOverviewEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapAccountOverviewEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapAccountOverviewEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapAccountOverviewEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapProfitDetailEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapProfitDetailEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapProfitDetailEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult_MapProfitDetailEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult, map_account_overview_),
  PROTOBUF_FIELD_OFFSET(::mam::LoadResult, map_profit_detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverviews, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverviews, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetails, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, accountid_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, turnover_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, rate_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, fee_),
  PROTOBUF_FIELD_OFFSET(::mam::AccountOverview, profit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, accountid_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, symbol_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, cfgvol_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, buyvol_),
  PROTOBUF_FIELD_OFFSET(::mam::ProfitDetail, sellvol_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mam::LoadResult_MapAccountOverviewEntry_DoNotUse)},
  { 9, 16, sizeof(::mam::LoadResult_MapProfitDetailEntry_DoNotUse)},
  { 18, -1, sizeof(::mam::LoadResult)},
  { 25, -1, sizeof(::mam::AccountOverviews)},
  { 31, -1, sizeof(::mam::ProfitDetails)},
  { 37, -1, sizeof(::mam::AccountOverview)},
  { 47, -1, sizeof(::mam::ProfitDetail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_LoadResult_MapAccountOverviewEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_LoadResult_MapProfitDetailEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_LoadResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_AccountOverviews_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_ProfitDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_AccountOverview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_ProfitDetail_default_instance_),
};

const char descriptor_table_protodef_twelfth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtwelfth.proto\022\003mam\"\262\002\n\nLoadResult\022E\n\024m"
  "ap_account_overview\030\001 \003(\0132\'.mam.LoadResu"
  "lt.MapAccountOverviewEntry\022\?\n\021map_profit"
  "_detail\030\002 \003(\0132$.mam.LoadResult.MapProfit"
  "DetailEntry\032P\n\027MapAccountOverviewEntry\022\013"
  "\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.mam.Account"
  "Overviews:\0028\001\032J\n\024MapProfitDetailEntry\022\013\n"
  "\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.mam.ProfitDe"
  "tails:\0028\001\"9\n\020AccountOverviews\022%\n\007content"
  "\030\001 \003(\0132\024.mam.AccountOverview\"3\n\rProfitDe"
  "tails\022\"\n\007content\030\001 \003(\0132\021.mam.ProfitDetai"
  "l\"a\n\017AccountOverview\022\021\n\taccountid\030\001 \001(\005\022"
  "\020\n\010turnover\030\002 \001(\001\022\014\n\004rate\030\003 \001(\001\022\013\n\003fee\030\004"
  " \001(\001\022\016\n\006profit\030\005 \001(\001\"b\n\014ProfitDetail\022\021\n\t"
  "accountid\030\001 \001(\005\022\016\n\006symbol\030\002 \001(\t\022\016\n\006cfgvo"
  "l\030\003 \001(\005\022\016\n\006buyvol\030\004 \001(\005\022\017\n\007sellvol\030\005 \001(\005"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_twelfth_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_twelfth_2eproto_sccs[7] = {
  &scc_info_AccountOverview_twelfth_2eproto.base,
  &scc_info_AccountOverviews_twelfth_2eproto.base,
  &scc_info_LoadResult_twelfth_2eproto.base,
  &scc_info_LoadResult_MapAccountOverviewEntry_DoNotUse_twelfth_2eproto.base,
  &scc_info_LoadResult_MapProfitDetailEntry_DoNotUse_twelfth_2eproto.base,
  &scc_info_ProfitDetail_twelfth_2eproto.base,
  &scc_info_ProfitDetails_twelfth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_twelfth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_twelfth_2eproto = {
  false, false, descriptor_table_protodef_twelfth_2eproto, "twelfth.proto", 648,
  &descriptor_table_twelfth_2eproto_once, descriptor_table_twelfth_2eproto_sccs, descriptor_table_twelfth_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_twelfth_2eproto::offsets,
  file_level_metadata_twelfth_2eproto, 7, file_level_enum_descriptors_twelfth_2eproto, file_level_service_descriptors_twelfth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_twelfth_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_twelfth_2eproto)), true);
namespace mam {

// ===================================================================

LoadResult_MapAccountOverviewEntry_DoNotUse::LoadResult_MapAccountOverviewEntry_DoNotUse() {}
LoadResult_MapAccountOverviewEntry_DoNotUse::LoadResult_MapAccountOverviewEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LoadResult_MapAccountOverviewEntry_DoNotUse::MergeFrom(const LoadResult_MapAccountOverviewEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LoadResult_MapAccountOverviewEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LoadResult_MapAccountOverviewEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

LoadResult_MapProfitDetailEntry_DoNotUse::LoadResult_MapProfitDetailEntry_DoNotUse() {}
LoadResult_MapProfitDetailEntry_DoNotUse::LoadResult_MapProfitDetailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LoadResult_MapProfitDetailEntry_DoNotUse::MergeFrom(const LoadResult_MapProfitDetailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LoadResult_MapProfitDetailEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LoadResult_MapProfitDetailEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LoadResult::InitAsDefaultInstance() {
}
class LoadResult::_Internal {
 public:
};

LoadResult::LoadResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  map_account_overview_(arena),
  map_profit_detail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.LoadResult)
}
LoadResult::LoadResult(const LoadResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_account_overview_.MergeFrom(from.map_account_overview_);
  map_profit_detail_.MergeFrom(from.map_profit_detail_);
  // @@protoc_insertion_point(copy_constructor:mam.LoadResult)
}

void LoadResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadResult_twelfth_2eproto.base);
}

LoadResult::~LoadResult() {
  // @@protoc_insertion_point(destructor:mam.LoadResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadResult::ArenaDtor(void* object) {
  LoadResult* _this = reinterpret_cast< LoadResult* >(object);
  (void)_this;
}
void LoadResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadResult& LoadResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadResult_twelfth_2eproto.base);
  return *internal_default_instance();
}


void LoadResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.LoadResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_account_overview_.Clear();
  map_profit_detail_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .mam.AccountOverviews> map_account_overview = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_account_overview_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .mam.ProfitDetails> map_profit_detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_profit_detail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.LoadResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .mam.AccountOverviews> map_account_overview = 1;
  if (!this->_internal_map_account_overview().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mam.LoadResult.MapAccountOverviewEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_account_overview().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_account_overview().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >::const_iterator
          it = this->_internal_map_account_overview().begin();
          it != this->_internal_map_account_overview().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LoadResult_MapAccountOverviewEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >::const_iterator
          it = this->_internal_map_account_overview().begin();
          it != this->_internal_map_account_overview().end(); ++it) {
        target = LoadResult_MapAccountOverviewEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .mam.ProfitDetails> map_profit_detail = 2;
  if (!this->_internal_map_profit_detail().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mam.LoadResult.MapProfitDetailEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map_profit_detail().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map_profit_detail().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >::const_iterator
          it = this->_internal_map_profit_detail().begin();
          it != this->_internal_map_profit_detail().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LoadResult_MapProfitDetailEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >::const_iterator
          it = this->_internal_map_profit_detail().begin();
          it != this->_internal_map_profit_detail().end(); ++it) {
        target = LoadResult_MapProfitDetailEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.LoadResult)
  return target;
}

size_t LoadResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.LoadResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mam.AccountOverviews> map_account_overview = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_account_overview_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::AccountOverviews >::const_iterator
      it = this->_internal_map_account_overview().begin();
      it != this->_internal_map_account_overview().end(); ++it) {
    total_size += LoadResult_MapAccountOverviewEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .mam.ProfitDetails> map_profit_detail = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_profit_detail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mam::ProfitDetails >::const_iterator
      it = this->_internal_map_profit_detail().begin();
      it != this->_internal_map_profit_detail().end(); ++it) {
    total_size += LoadResult_MapProfitDetailEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.LoadResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.LoadResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.LoadResult)
    MergeFrom(*source);
  }
}

void LoadResult::MergeFrom(const LoadResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.LoadResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_account_overview_.MergeFrom(from.map_account_overview_);
  map_profit_detail_.MergeFrom(from.map_profit_detail_);
}

void LoadResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.LoadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadResult::CopyFrom(const LoadResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.LoadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadResult::IsInitialized() const {
  return true;
}

void LoadResult::InternalSwap(LoadResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_account_overview_.Swap(&other->map_account_overview_);
  map_profit_detail_.Swap(&other->map_profit_detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountOverviews::InitAsDefaultInstance() {
}
class AccountOverviews::_Internal {
 public:
};

AccountOverviews::AccountOverviews(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  content_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.AccountOverviews)
}
AccountOverviews::AccountOverviews(const AccountOverviews& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_(from.content_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mam.AccountOverviews)
}

void AccountOverviews::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountOverviews_twelfth_2eproto.base);
}

AccountOverviews::~AccountOverviews() {
  // @@protoc_insertion_point(destructor:mam.AccountOverviews)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountOverviews::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AccountOverviews::ArenaDtor(void* object) {
  AccountOverviews* _this = reinterpret_cast< AccountOverviews* >(object);
  (void)_this;
}
void AccountOverviews::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountOverviews::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountOverviews& AccountOverviews::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountOverviews_twelfth_2eproto.base);
  return *internal_default_instance();
}


void AccountOverviews::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.AccountOverviews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountOverviews::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mam.AccountOverview content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountOverviews::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.AccountOverviews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mam.AccountOverview content = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_content(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.AccountOverviews)
  return target;
}

size_t AccountOverviews::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.AccountOverviews)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mam.AccountOverview content = 1;
  total_size += 1UL * this->_internal_content_size();
  for (const auto& msg : this->content_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountOverviews::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.AccountOverviews)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountOverviews* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountOverviews>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.AccountOverviews)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.AccountOverviews)
    MergeFrom(*source);
  }
}

void AccountOverviews::MergeFrom(const AccountOverviews& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.AccountOverviews)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
}

void AccountOverviews::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.AccountOverviews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountOverviews::CopyFrom(const AccountOverviews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.AccountOverviews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountOverviews::IsInitialized() const {
  return true;
}

void AccountOverviews::InternalSwap(AccountOverviews* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountOverviews::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfitDetails::InitAsDefaultInstance() {
}
class ProfitDetails::_Internal {
 public:
};

ProfitDetails::ProfitDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  content_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.ProfitDetails)
}
ProfitDetails::ProfitDetails(const ProfitDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_(from.content_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mam.ProfitDetails)
}

void ProfitDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfitDetails_twelfth_2eproto.base);
}

ProfitDetails::~ProfitDetails() {
  // @@protoc_insertion_point(destructor:mam.ProfitDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfitDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfitDetails::ArenaDtor(void* object) {
  ProfitDetails* _this = reinterpret_cast< ProfitDetails* >(object);
  (void)_this;
}
void ProfitDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfitDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfitDetails& ProfitDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfitDetails_twelfth_2eproto.base);
  return *internal_default_instance();
}


void ProfitDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.ProfitDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfitDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mam.ProfitDetail content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfitDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.ProfitDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mam.ProfitDetail content = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_content(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.ProfitDetails)
  return target;
}

size_t ProfitDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.ProfitDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mam.ProfitDetail content = 1;
  total_size += 1UL * this->_internal_content_size();
  for (const auto& msg : this->content_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfitDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.ProfitDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfitDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfitDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.ProfitDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.ProfitDetails)
    MergeFrom(*source);
  }
}

void ProfitDetails::MergeFrom(const ProfitDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.ProfitDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
}

void ProfitDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.ProfitDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfitDetails::CopyFrom(const ProfitDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.ProfitDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfitDetails::IsInitialized() const {
  return true;
}

void ProfitDetails::InternalSwap(ProfitDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfitDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountOverview::InitAsDefaultInstance() {
}
class AccountOverview::_Internal {
 public:
};

AccountOverview::AccountOverview(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.AccountOverview)
}
AccountOverview::AccountOverview(const AccountOverview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turnover_, &from.turnover_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&turnover_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:mam.AccountOverview)
}

void AccountOverview::SharedCtor() {
  ::memset(&turnover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&turnover_)) + sizeof(accountid_));
}

AccountOverview::~AccountOverview() {
  // @@protoc_insertion_point(destructor:mam.AccountOverview)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccountOverview::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AccountOverview::ArenaDtor(void* object) {
  AccountOverview* _this = reinterpret_cast< AccountOverview* >(object);
  (void)_this;
}
void AccountOverview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccountOverview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountOverview& AccountOverview::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountOverview_twelfth_2eproto.base);
  return *internal_default_instance();
}


void AccountOverview::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.AccountOverview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&turnover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accountid_) -
      reinterpret_cast<char*>(&turnover_)) + sizeof(accountid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountOverview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double profit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountOverview::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.AccountOverview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 accountid = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_accountid(), target);
  }

  // double turnover = 2;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_turnover(), target);
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rate(), target);
  }

  // double fee = 4;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fee(), target);
  }

  // double profit = 5;
  if (!(this->profit() <= 0 && this->profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_profit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.AccountOverview)
  return target;
}

size_t AccountOverview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.AccountOverview)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double turnover = 2;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // double rate = 3;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double fee = 4;
  if (!(this->fee() <= 0 && this->fee() >= 0)) {
    total_size += 1 + 8;
  }

  // double profit = 5;
  if (!(this->profit() <= 0 && this->profit() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 accountid = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accountid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountOverview::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.AccountOverview)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountOverview* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountOverview>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.AccountOverview)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.AccountOverview)
    MergeFrom(*source);
  }
}

void AccountOverview::MergeFrom(const AccountOverview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.AccountOverview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.fee() <= 0 && from.fee() >= 0)) {
    _internal_set_fee(from._internal_fee());
  }
  if (!(from.profit() <= 0 && from.profit() >= 0)) {
    _internal_set_profit(from._internal_profit());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
}

void AccountOverview::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.AccountOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountOverview::CopyFrom(const AccountOverview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.AccountOverview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountOverview::IsInitialized() const {
  return true;
}

void AccountOverview::InternalSwap(AccountOverview* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountOverview, accountid_)
      + sizeof(AccountOverview::accountid_)
      - PROTOBUF_FIELD_OFFSET(AccountOverview, turnover_)>(
          reinterpret_cast<char*>(&turnover_),
          reinterpret_cast<char*>(&other->turnover_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountOverview::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfitDetail::InitAsDefaultInstance() {
}
class ProfitDetail::_Internal {
 public:
};

ProfitDetail::ProfitDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.ProfitDetail)
}
ProfitDetail::ProfitDetail(const ProfitDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbol(),
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sellvol_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(sellvol_));
  // @@protoc_insertion_point(copy_constructor:mam.ProfitDetail)
}

void ProfitDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfitDetail_twelfth_2eproto.base);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sellvol_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(sellvol_));
}

ProfitDetail::~ProfitDetail() {
  // @@protoc_insertion_point(destructor:mam.ProfitDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfitDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfitDetail::ArenaDtor(void* object) {
  ProfitDetail* _this = reinterpret_cast< ProfitDetail* >(object);
  (void)_this;
}
void ProfitDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfitDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfitDetail& ProfitDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfitDetail_twelfth_2eproto.base);
  return *internal_default_instance();
}


void ProfitDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.ProfitDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sellvol_) -
      reinterpret_cast<char*>(&accountid_)) + sizeof(sellvol_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfitDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.ProfitDetail.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cfgvol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cfgvol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buyvol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          buyvol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sellvol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sellvol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfitDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.ProfitDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 accountid = 1;
  if (this->accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_accountid(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.ProfitDetail.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // int32 cfgvol = 3;
  if (this->cfgvol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cfgvol(), target);
  }

  // int32 buyvol = 4;
  if (this->buyvol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_buyvol(), target);
  }

  // int32 sellvol = 5;
  if (this->sellvol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_sellvol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.ProfitDetail)
  return target;
}

size_t ProfitDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.ProfitDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // int32 accountid = 1;
  if (this->accountid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accountid());
  }

  // int32 cfgvol = 3;
  if (this->cfgvol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cfgvol());
  }

  // int32 buyvol = 4;
  if (this->buyvol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buyvol());
  }

  // int32 sellvol = 5;
  if (this->sellvol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sellvol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfitDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.ProfitDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfitDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfitDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.ProfitDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.ProfitDetail)
    MergeFrom(*source);
  }
}

void ProfitDetail::MergeFrom(const ProfitDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.ProfitDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from.accountid() != 0) {
    _internal_set_accountid(from._internal_accountid());
  }
  if (from.cfgvol() != 0) {
    _internal_set_cfgvol(from._internal_cfgvol());
  }
  if (from.buyvol() != 0) {
    _internal_set_buyvol(from._internal_buyvol());
  }
  if (from.sellvol() != 0) {
    _internal_set_sellvol(from._internal_sellvol());
  }
}

void ProfitDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.ProfitDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfitDetail::CopyFrom(const ProfitDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.ProfitDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfitDetail::IsInitialized() const {
  return true;
}

void ProfitDetail::InternalSwap(ProfitDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfitDetail, sellvol_)
      + sizeof(ProfitDetail::sellvol_)
      - PROTOBUF_FIELD_OFFSET(ProfitDetail, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfitDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::LoadResult_MapAccountOverviewEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::LoadResult_MapProfitDetailEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::LoadResult_MapProfitDetailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::LoadResult_MapProfitDetailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::LoadResult* Arena::CreateMaybeMessage< ::mam::LoadResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::LoadResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::AccountOverviews* Arena::CreateMaybeMessage< ::mam::AccountOverviews >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::AccountOverviews >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::ProfitDetails* Arena::CreateMaybeMessage< ::mam::ProfitDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::ProfitDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::AccountOverview* Arena::CreateMaybeMessage< ::mam::AccountOverview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::AccountOverview >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::ProfitDetail* Arena::CreateMaybeMessage< ::mam::ProfitDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::ProfitDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
