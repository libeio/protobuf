// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: seventh.proto

#include "seventh.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_seventh_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Digimon_XMapEntry_DoNotUse_seventh_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_seventh_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubType_seventh_2eproto;
namespace mam {
class Digimon_XMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Digimon_XMapEntry_DoNotUse> _instance;
} _Digimon_XMapEntry_DoNotUse_default_instance_;
class DigimonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Digimon> _instance;
} _Digimon_default_instance_;
class SubTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubType> _instance;
} _SubType_default_instance_;
}  // namespace mam
static void InitDefaultsscc_info_Digimon_seventh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_Digimon_default_instance_;
    new (ptr) ::mam::Digimon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::Digimon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Digimon_seventh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Digimon_seventh_2eproto}, {
      &scc_info_Digimon_XMapEntry_DoNotUse_seventh_2eproto.base,
      &scc_info_SubType_seventh_2eproto.base,}};

static void InitDefaultsscc_info_Digimon_XMapEntry_DoNotUse_seventh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_Digimon_XMapEntry_DoNotUse_default_instance_;
    new (ptr) ::mam::Digimon_XMapEntry_DoNotUse();
  }
  ::mam::Digimon_XMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Digimon_XMapEntry_DoNotUse_seventh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Digimon_XMapEntry_DoNotUse_seventh_2eproto}, {}};

static void InitDefaultsscc_info_SubType_seventh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mam::_SubType_default_instance_;
    new (ptr) ::mam::SubType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mam::SubType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubType_seventh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubType_seventh_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_seventh_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_seventh_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_seventh_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_seventh_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mam::Digimon_XMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon_XMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::Digimon_XMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon_XMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_d_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_f_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_i64_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_ui64_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_i32_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_ui32_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_bl_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_str_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_bs_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_map_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, x_enum_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, st_),
  PROTOBUF_FIELD_OFFSET(::mam::Digimon, rst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mam::SubType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mam::SubType, y_i32_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mam::Digimon_XMapEntry_DoNotUse)},
  { 9, -1, sizeof(::mam::Digimon)},
  { 27, -1, sizeof(::mam::SubType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_Digimon_XMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_Digimon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mam::_SubType_default_instance_),
};

const char descriptor_table_protodef_seventh_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rseventh.proto\022\003mam\"\250\002\n\007Digimon\022\013\n\003x_d\030"
  "\001 \001(\001\022\013\n\003x_f\030\002 \001(\002\022\r\n\005x_i64\030\003 \001(\003\022\016\n\006x_u"
  "i64\030\004 \001(\004\022\r\n\005x_i32\030\005 \001(\005\022\016\n\006x_ui32\030\006 \001(\r"
  "\022\014\n\004x_bl\030\007 \001(\010\022\r\n\005x_str\030\010 \001(\t\022\014\n\004x_bs\030\t "
  "\001(\014\022%\n\005x_map\030\n \003(\0132\026.mam.Digimon.XMapEnt"
  "ry\022\037\n\006x_enum\030\013 \001(\0162\017.mam.ShouldType\022\030\n\002s"
  "t\030\014 \001(\0132\014.mam.SubType\022\013\n\003rst\030\r \003(\005\032+\n\tXM"
  "apEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\""
  "\030\n\007SubType\022\r\n\005y_i32\030\001 \001(\005*6\n\nShouldType\022"
  "\014\n\010NoneType\020\000\022\014\n\010NameType\020\001\022\014\n\010TimeType\020"
  "\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_seventh_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_seventh_2eproto_sccs[3] = {
  &scc_info_Digimon_seventh_2eproto.base,
  &scc_info_Digimon_XMapEntry_DoNotUse_seventh_2eproto.base,
  &scc_info_SubType_seventh_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_seventh_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_seventh_2eproto = {
  false, false, descriptor_table_protodef_seventh_2eproto, "seventh.proto", 409,
  &descriptor_table_seventh_2eproto_once, descriptor_table_seventh_2eproto_sccs, descriptor_table_seventh_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_seventh_2eproto::offsets,
  file_level_metadata_seventh_2eproto, 3, file_level_enum_descriptors_seventh_2eproto, file_level_service_descriptors_seventh_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_seventh_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_seventh_2eproto)), true);
namespace mam {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShouldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_seventh_2eproto);
  return file_level_enum_descriptors_seventh_2eproto[0];
}
bool ShouldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Digimon_XMapEntry_DoNotUse::Digimon_XMapEntry_DoNotUse() {}
Digimon_XMapEntry_DoNotUse::Digimon_XMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Digimon_XMapEntry_DoNotUse::MergeFrom(const Digimon_XMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Digimon_XMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Digimon_XMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Digimon::InitAsDefaultInstance() {
  ::mam::_Digimon_default_instance_._instance.get_mutable()->st_ = const_cast< ::mam::SubType*>(
      ::mam::SubType::internal_default_instance());
}
class Digimon::_Internal {
 public:
  static const ::mam::SubType& st(const Digimon* msg);
};

const ::mam::SubType&
Digimon::_Internal::st(const Digimon* msg) {
  return *msg->st_;
}
Digimon::Digimon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  x_map_(arena),
  rst_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.Digimon)
}
Digimon::Digimon(const Digimon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rst_(from.rst_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  x_map_.MergeFrom(from.x_map_);
  x_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_x_str().empty()) {
    x_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_x_str(),
      GetArena());
  }
  x_bs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_x_bs().empty()) {
    x_bs_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_x_bs(),
      GetArena());
  }
  if (from._internal_has_st()) {
    st_ = new ::mam::SubType(*from.st_);
  } else {
    st_ = nullptr;
  }
  ::memcpy(&x_d_, &from.x_d_,
    static_cast<size_t>(reinterpret_cast<char*>(&x_enum_) -
    reinterpret_cast<char*>(&x_d_)) + sizeof(x_enum_));
  // @@protoc_insertion_point(copy_constructor:mam.Digimon)
}

void Digimon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Digimon_seventh_2eproto.base);
  x_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  x_bs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&st_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&x_enum_) -
      reinterpret_cast<char*>(&st_)) + sizeof(x_enum_));
}

Digimon::~Digimon() {
  // @@protoc_insertion_point(destructor:mam.Digimon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Digimon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  x_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  x_bs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete st_;
}

void Digimon::ArenaDtor(void* object) {
  Digimon* _this = reinterpret_cast< Digimon* >(object);
  (void)_this;
}
void Digimon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Digimon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Digimon& Digimon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Digimon_seventh_2eproto.base);
  return *internal_default_instance();
}


void Digimon::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.Digimon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_map_.Clear();
  rst_.Clear();
  x_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  x_bs_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && st_ != nullptr) {
    delete st_;
  }
  st_ = nullptr;
  ::memset(&x_d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&x_enum_) -
      reinterpret_cast<char*>(&x_d_)) + sizeof(x_enum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Digimon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x_d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float x_f = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_f_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 x_i64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          x_i64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 x_ui64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          x_ui64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x_i32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          x_i32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 x_ui32 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          x_ui32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool x_bl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          x_bl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string x_str = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_x_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mam.Digimon.x_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes x_bs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_x_bs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> x_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&x_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .mam.ShouldType x_enum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_x_enum(static_cast<::mam::ShouldType>(val));
        } else goto handle_unusual;
        continue;
      // .mam.SubType st = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_st(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rst = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rst(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_rst(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Digimon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.Digimon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x_d = 1;
  if (!(this->x_d() <= 0 && this->x_d() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x_d(), target);
  }

  // float x_f = 2;
  if (!(this->x_f() <= 0 && this->x_f() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x_f(), target);
  }

  // int64 x_i64 = 3;
  if (this->x_i64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_x_i64(), target);
  }

  // uint64 x_ui64 = 4;
  if (this->x_ui64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_x_ui64(), target);
  }

  // int32 x_i32 = 5;
  if (this->x_i32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_x_i32(), target);
  }

  // uint32 x_ui32 = 6;
  if (this->x_ui32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_x_ui32(), target);
  }

  // bool x_bl = 7;
  if (this->x_bl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_x_bl(), target);
  }

  // string x_str = 8;
  if (this->x_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_x_str().data(), static_cast<int>(this->_internal_x_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mam.Digimon.x_str");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_x_str(), target);
  }

  // bytes x_bs = 9;
  if (this->x_bs().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_x_bs(), target);
  }

  // map<string, double> x_map = 10;
  if (!this->_internal_x_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mam.Digimon.XMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_x_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_x_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_x_map().begin();
          it != this->_internal_x_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Digimon_XMapEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_x_map().begin();
          it != this->_internal_x_map().end(); ++it) {
        target = Digimon_XMapEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .mam.ShouldType x_enum = 11;
  if (this->x_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_x_enum(), target);
  }

  // .mam.SubType st = 12;
  if (this->has_st()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::st(this), target, stream);
  }

  // repeated int32 rst = 13;
  {
    int byte_size = _rst_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          13, _internal_rst(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.Digimon)
  return target;
}

size_t Digimon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.Digimon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> x_map = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_x_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_x_map().begin();
      it != this->_internal_x_map().end(); ++it) {
    total_size += Digimon_XMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 rst = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rst_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rst_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string x_str = 8;
  if (this->x_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_x_str());
  }

  // bytes x_bs = 9;
  if (this->x_bs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_x_bs());
  }

  // .mam.SubType st = 12;
  if (this->has_st()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *st_);
  }

  // double x_d = 1;
  if (!(this->x_d() <= 0 && this->x_d() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 x_i64 = 3;
  if (this->x_i64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_x_i64());
  }

  // float x_f = 2;
  if (!(this->x_f() <= 0 && this->x_f() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 x_i32 = 5;
  if (this->x_i32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x_i32());
  }

  // uint64 x_ui64 = 4;
  if (this->x_ui64() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_x_ui64());
  }

  // uint32 x_ui32 = 6;
  if (this->x_ui32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x_ui32());
  }

  // bool x_bl = 7;
  if (this->x_bl() != 0) {
    total_size += 1 + 1;
  }

  // .mam.ShouldType x_enum = 11;
  if (this->x_enum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_x_enum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Digimon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.Digimon)
  GOOGLE_DCHECK_NE(&from, this);
  const Digimon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Digimon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.Digimon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.Digimon)
    MergeFrom(*source);
  }
}

void Digimon::MergeFrom(const Digimon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.Digimon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_map_.MergeFrom(from.x_map_);
  rst_.MergeFrom(from.rst_);
  if (from.x_str().size() > 0) {
    _internal_set_x_str(from._internal_x_str());
  }
  if (from.x_bs().size() > 0) {
    _internal_set_x_bs(from._internal_x_bs());
  }
  if (from.has_st()) {
    _internal_mutable_st()->::mam::SubType::MergeFrom(from._internal_st());
  }
  if (!(from.x_d() <= 0 && from.x_d() >= 0)) {
    _internal_set_x_d(from._internal_x_d());
  }
  if (from.x_i64() != 0) {
    _internal_set_x_i64(from._internal_x_i64());
  }
  if (!(from.x_f() <= 0 && from.x_f() >= 0)) {
    _internal_set_x_f(from._internal_x_f());
  }
  if (from.x_i32() != 0) {
    _internal_set_x_i32(from._internal_x_i32());
  }
  if (from.x_ui64() != 0) {
    _internal_set_x_ui64(from._internal_x_ui64());
  }
  if (from.x_ui32() != 0) {
    _internal_set_x_ui32(from._internal_x_ui32());
  }
  if (from.x_bl() != 0) {
    _internal_set_x_bl(from._internal_x_bl());
  }
  if (from.x_enum() != 0) {
    _internal_set_x_enum(from._internal_x_enum());
  }
}

void Digimon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.Digimon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Digimon::CopyFrom(const Digimon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.Digimon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Digimon::IsInitialized() const {
  return true;
}

void Digimon::InternalSwap(Digimon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  x_map_.Swap(&other->x_map_);
  rst_.InternalSwap(&other->rst_);
  x_str_.Swap(&other->x_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  x_bs_.Swap(&other->x_bs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Digimon, x_enum_)
      + sizeof(Digimon::x_enum_)
      - PROTOBUF_FIELD_OFFSET(Digimon, st_)>(
          reinterpret_cast<char*>(&st_),
          reinterpret_cast<char*>(&other->st_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Digimon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubType::InitAsDefaultInstance() {
}
class SubType::_Internal {
 public:
};

SubType::SubType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mam.SubType)
}
SubType::SubType(const SubType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  y_i32_ = from.y_i32_;
  // @@protoc_insertion_point(copy_constructor:mam.SubType)
}

void SubType::SharedCtor() {
  y_i32_ = 0;
}

SubType::~SubType() {
  // @@protoc_insertion_point(destructor:mam.SubType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SubType::ArenaDtor(void* object) {
  SubType* _this = reinterpret_cast< SubType* >(object);
  (void)_this;
}
void SubType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubType& SubType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubType_seventh_2eproto.base);
  return *internal_default_instance();
}


void SubType::Clear() {
// @@protoc_insertion_point(message_clear_start:mam.SubType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  y_i32_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 y_i32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          y_i32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mam.SubType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 y_i32 = 1;
  if (this->y_i32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_y_i32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mam.SubType)
  return target;
}

size_t SubType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mam.SubType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 y_i32 = 1;
  if (this->y_i32() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y_i32());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mam.SubType)
  GOOGLE_DCHECK_NE(&from, this);
  const SubType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mam.SubType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mam.SubType)
    MergeFrom(*source);
  }
}

void SubType::MergeFrom(const SubType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mam.SubType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.y_i32() != 0) {
    _internal_set_y_i32(from._internal_y_i32());
  }
}

void SubType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mam.SubType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubType::CopyFrom(const SubType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mam.SubType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubType::IsInitialized() const {
  return true;
}

void SubType::InternalSwap(SubType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(y_i32_, other->y_i32_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mam::Digimon_XMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::mam::Digimon_XMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::Digimon_XMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::Digimon* Arena::CreateMaybeMessage< ::mam::Digimon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::Digimon >(arena);
}
template<> PROTOBUF_NOINLINE ::mam::SubType* Arena::CreateMaybeMessage< ::mam::SubType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mam::SubType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
